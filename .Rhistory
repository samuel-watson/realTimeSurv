cov.model = "exponential",
cov.pars = cov.pars[1:2],
nugget = cov.pars[3])
cov2 <- geoR::grf(n=nrow(spgrd)*2,
grid=spgrd,
borders = as.matrix(region.df[,c('long','lat')],ncol=2),
nx=100,
ny=100,
cov.model = "exponential",
cov.pars = cov.pars[1:2],
nugget = cov.pars[3])
data <- cbind(as.data.frame(spgrd), cov=cov1$data, cov2=cov2$data, pop=pop)
colnames(data)[1:2] <- c('x','y')
#intensity in each cell
imat <- matrix(data$pop*exp(beta[1]*data$cov - beta[1]^2*(cov.pars[1]+cov.pars[3])/2 +
beta[2]*data$cov2 - beta[2]^2*(cov.pars[1]+cov.pars[3])/2)*
mean.val*(1-p)/sum(data$pop),
nrow=nrow(data),ncol=length(t.win[1]:t.win[2])+1)
imat_in <- matrix(data$pop*exp(beta[1]*data$cov - beta[1]^2*(cov.pars[1]+cov.pars[3])/2 +
beta[2]*data$cov2 - beta[2]^2*(cov.pars[1]+cov.pars[3])/2)*mean.val*p/sum(data$pop),
nrow=nrow(data),ncol=length(t.win[1]:t.win[2])+1)
# for each time period,1. generate cases, 2. with probability p case raises intensity
print("Generating simulation")
for(t in 1:length(t.win[1]:t.win[2])){
dt1 <- data
dt1$t <- t
dt1$n <- rpois(nrow(data),imat[,t])
dt1$n_in <- rpois(nrow(data),imat_in[,t]) #infectious parents
# probability of spreading
if(any(dt1$n_in>0)){
idx <- which(dt1$n_in>0)
for(i in idx){
dis1 <- sqrt((data$x - data$x[i])^2 + (data$y - data$y[i])^2)
#print(cat("T: ",t))
for(s in (t+1):length(t.win[1]:t.win[2])){
imat[,s] <- imat[,s]*(1+rho*exp(-dis1/delta[1])*exp(-((s-t.off-t)^2)/delta[2]))
}
}
}
dt1$intens <- imat[,t] + imat_in[,t]
dt1$n_tot <- dt1$n+dt1$n_in
if(t==1){
dat <- dt1
} else {
dat <- rbind(dat,dt1)
}
}
#points locations
idx <- which(dat$n>0)
pts <- dat[rep(which(dat$n>0),dat[dat$n>0,'n']),]
pts$x <- pts$x+runif(nrow(pts),-x.size/2,x.size/2)
pts$y <- pts$y+runif(nrow(pts),-x.size/2,x.size/2)
# pl1 <- ggplot(data=dat,aes(x=x,y=y,fill=log(intens)))+
#   geom_raster()+
#   scale_fill_viridis_c()+
#   facet_wrap(~t)+
#   theme_bw()+
#   theme(panel.grid = element_blank())
#
# pl2 <- ggplot(data=pts,aes(x=x,y=y))+
#   geom_point(color="red",size=0.1)+
#   geom_path(data=region.df,aes(x=long,y=lat))+
#   scale_fill_viridis_c(name="Log\nintensity")+
#   facet_wrap(~t)+
#   theme_bw()+
#   theme(panel.grid = element_blank())
# datxyt <- as.matrix(pts[,c('x','y','t')])
# attr(datxyt,"class") <- "stpp"
#return(list(dat,pts[,c('x','y','t')],pl1,pl2,datxyt))
return(pts[,c('x','y','t')])
}
dat <- infecSim(region = square,
t.win = c(1,7),
covariates = square_pop,
mean.val= 10,
p =1/10,
delta = c(0.01,4),
rho=3,
t.off = 4,
cov.pars = c(0.9,0.03,0.1),
grid.size = 10^2)
expect_s3_class(dat,"data.frame")
mintest <- mincontrast_st(dat,
square_pop,
square)
require(realTimeSurv)
mintest <- mincontrast_st(dat,
square_pop,
square)
warnings()
#'
#' @param data A data frame consisting of columns \code{x}, \code{y}, and \code{t}, which are two
#' spatial coordinates and time point respectively.
#' @param covariates A \code{spatialPolygonsDataFrame} covering the area of interest with the
#' population density column named \code{popdens}
#' @param boundary A \code{spatialPolygonsDataFrame} of the boundary of the area of interest.
#' @return Returned values are the minimum contrast estimates of phi, sigma^2 and theta,
#' as well as the overall squared discrepancy between the parametric and nonparametric forms
#' of the spatial function used corresponding to these estimates.
#' @export
mincontrast_st <- function(data,covariates,boundary){
if(!is(data,"data.frame")|any(!colnames(data)%in%c('x','y','t')))stop("Data needs to be a data frame with columns x,y, and t")
if(!is(boundary,"SpatialPolygonsDataFrame"))stop("Boundary needs to be of class SpatialPolygonsDataFrame")
if(!is.null(covariates)&!is(covariates,"SpatialPolygonsDataFrame"))stop("Covariates needs to be of class SpatialPolygonsDataFrame")
win <- maptools::as.owin.SpatialPolygons(boundary)
if(!is.null(covariates)){
requireNamespace("spatstat")
popVal <- function(x,y){
spp <- sp::SpatialPoints(data.frame(x=x,y=y))
crsN <- CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
sp::proj4string(spp) <- crsN
sp::proj4string(covariates) <- crsN
val <- sp::over(spp,covariates)
return(val[,"popdens"])
}
pop <- spatstat.geom::as.im(popVal,win)
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
spatial.dens = pop,
temporal.intens = lgcp::muEst(xyt)))
} else {
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
temporal.intens = lgcp::muEst(xyt)))
}
return(vars.est$estimates)
}
mintest <- mincontrast_st(dat,
square_pop,
square)
mintest <- mincontrast_st(dat,
NULL,
square)
#'
#' @param data A data frame consisting of columns \code{x}, \code{y}, and \code{t}, which are two
#' spatial coordinates and time point respectively.
#' @param covariates A \code{spatialPolygonsDataFrame} covering the area of interest with the
#' population density column named \code{popdens}
#' @param boundary A \code{spatialPolygonsDataFrame} of the boundary of the area of interest.
#' @return Returned values are the minimum contrast estimates of phi, sigma^2 and theta,
#' as well as the overall squared discrepancy between the parametric and nonparametric forms
#' of the spatial function used corresponding to these estimates.
#' @export
mincontrast_st <- function(data,covariates,boundary){
if(!is(data,"data.frame")|any(!colnames(data)%in%c('x','y','t')))stop("Data needs to be a data frame with columns x,y, and t")
if(!is(boundary,"SpatialPolygonsDataFrame"))stop("Boundary needs to be of class SpatialPolygonsDataFrame")
if(!is.null(covariates)&!is(covariates,"SpatialPolygonsDataFrame"))stop("Covariates needs to be of class SpatialPolygonsDataFrame")
win <- maptools::as.owin.SpatialPolygons(boundary)
if(!is.null(covariates)){
requireNamespace("spatstat")
popVal <- function(x,y){
spp <- sp::SpatialPoints(data.frame(x=x,y=y))
crsN <- CRS("+init=epsg:4326 +proj=longlat +ellps=WGS84 +no_defs +towgs84=0,0,0")
sp::proj4string(spp) <- crsN
sp::proj4string(covariates) <- crsN
val <- sp::over(spp,covariates)
return(val[,"popdens"])
}
pop <- spatstat.geom::as.im(popVal,win)
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
spatial.dens = pop,
temporal.intens = lgcp::muEst(xyt)))
} else {
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
temporal.intens = lgcp::muEst(xyt)))
}
return(vars.est$estimates)
}
mintest <- mincontrast_st(dat,
square_pop,
square)
#'
#' @param data A data frame consisting of columns \code{x}, \code{y}, and \code{t}, which are two
#' spatial coordinates and time point respectively.
#' @param covariates A \code{spatialPolygonsDataFrame} covering the area of interest with the
#' population density column named \code{popdens}
#' @param boundary A \code{spatialPolygonsDataFrame} of the boundary of the area of interest.
#' @return Returned values are the minimum contrast estimates of phi, sigma^2 and theta,
#' as well as the overall squared discrepancy between the parametric and nonparametric forms
#' of the spatial function used corresponding to these estimates.
#' @export
mincontrast_st <- function(data,covariates,boundary){
if(!is(data,"data.frame")|any(!colnames(data)%in%c('x','y','t')))stop("Data needs to be a data frame with columns x,y, and t")
if(!is(boundary,"SpatialPolygonsDataFrame"))stop("Boundary needs to be of class SpatialPolygonsDataFrame")
if(!is.null(covariates)&!is(covariates,"SpatialPolygonsDataFrame"))stop("Covariates needs to be of class SpatialPolygonsDataFrame")
win <- maptools::as.owin.SpatialPolygons(boundary)
if(!is.null(covariates)){
requireNamespace("spatstat")
popVal <- function(x,y){
spp <- sp::SpatialPoints(data.frame(x=x,y=y))
crsN <- CRS("+init=epsg:4326")
sp::proj4string(spp) <- crsN
sp::proj4string(covariates) <- crsN
val <- sp::over(spp,covariates)
return(val[,"popdens"])
}
pop <- spatstat.geom::as.im(popVal,win)
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
spatial.dens = pop,
temporal.intens = lgcp::muEst(xyt)))
} else {
xyt <- lgcp::stppp(list(data = data, tlim = range(data$t), window = win))
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
temporal.intens = lgcp::muEst(xyt)))
}
return(vars.est$estimates)
}
mintest <- mincontrast_st(dat,
square_pop,
square)
lg1 <- lgcp(data=dat,
pop.var = c("popdens"),
boundary=square,
covariates=square_pop,
cellwidth=0.1,
laglength = 7,
mala.pars=c(200,100,1),
nchains=3,
dirname="~/test",
lib = "C:/docs/R")
warnings()
#' @param dirname The directory root name to save model output. A directory is created for each
#' MCMC chain as \code{dirname.1}, \code{dirname.2}, etc.
#' @param prevRun Used to set prior distributions. Either output from a previous call to \code{lgcp}
#' to use posterior distributions from previous period, or a call to \code{lgcp::lgcpPrior}.
#' @param mala.pars Parameters for the MCMC sampler. A vector of three numbers: the total number
#' of iterations, the number of warmup iterations, and the number to thin.
#' @param nchains The number of MCMC chains, default is \code{parallel::detectCores()}
#' @param lib Library location if not the default, otherwise NULL
#' @return An object of class lgcpReal
#' @export
lgcp <- function(data,
data.t=NULL,
sp.covs=NULL,
t.covs=NULL,
pop.var=NULL,
boundary,
covariates=NULL,
cellwidth,
laglength,
dirname,
prevRun=NULL,
mala.pars=c(26250,20000,50),
nchains=parallel::detectCores(),
lib=NULL){
if(!is(data,"data.frame")|any(!colnames(data)%in%c('x','y','t')))stop("Data needs to be a data frame with columns x,y, and t")
if(!is(boundary,"SpatialPolygonsDataFrame"))stop("Boundary needs to be of class SpatialPolygonsDataFrame")
if(!is.null(covariates)&!is(covariates,"SpatialPolygonsDataFrame"))stop("Covariates needs to be of class SpatialPolygonsDataFrame")
if(any(is.na(data$x)|is.na(data$y)))warning(paste0(sum(is.na(data$x)|is.na(data$y))," rows have NA values and will be removed."))
data <- data[!is.na(data$x)&!is.na(data$y),]
data <- data[,c('x','y','t')]
data <- data[order(data$t),]
tlim <- c(1,laglength)
data <- data[data$t %in% c(max(data$t):(max(data$t)-laglength)) ,]
data$t <- data$t - (max(data$t)-laglength)
data <- data[data$t%in%c(tlim[1]:tlim[2]),]
win <- maptools::as.owin.SpatialPolygons(boundary)
xyt <- lgcp::stppp(list(data = data, tlim = tlim, window = win))
Owin <- lgcp::selectObsWindow(xyt,cellwidth)
if(!is.null(sp.covs)){
form.sp <- "X ~ "
for(i in 1:length(sp.covs)){
if(i==1){
form.sp <- paste0(form.sp," ",sp.covs[i])
} else {
form.sp <- paste0(form.sp," + ",sp.covs[i])
}
}
} else {
form.sp <- "X ~ 1"
}
if(!is.null(t.covs)){
form.t <- "t ~ -1 "
for(i in 1:length(t.covs)){
form.t <- paste0(form.t," + ",t.covs[i])
form <- paste0(form.sp," + ",t.covs[i])
}
form <- as.formula(form)
form.t <- as.formula(form.t)
} else {
form <- as.formula(form.sp)
form.t <- NULL
}
T <- tlim[2]
if(!is.null(pop.var)|!is.null(sp.covs)){
covariates@data <- lgcp::guessinterp(covariates@data)
}
if(!is.null(sp.covs)){
form.sp <- as.formula(form.sp)
polyolay <- lgcp::getpolyol(data = xyt,
cellwidth = cellwidth,
regionalcovariates = covariates,
ext = 2)
#covariates@data <- lgcp::guessinterp(covariates@data)
Zmat <- lgcp::getZmat(
formula = form.sp,
data = xyt,
cellwidth = cellwidth,
regionalcovariates = covariates,
ext = 2,
overl = polyolay
)
} else {
form.sp <- X ~ 1
attr(form.sp, ".Environment") <- .GlobalEnv
polyolay <- lgcp::getpolyol(data = xyt,
cellwidth = cellwidth,
regionalcovariates = covariates,
ext = 2)
Zmat <- lgcp::getZmat(
formula = form.sp,
data = xyt,
cellwidth = cellwidth,
ext = 2,
overl = polyolay
)
}
if(!is.null(pop.var)){
form.pop <- as.formula(paste0("X ~ -1 + ",pop.var))
Zmat_pop <- lgcp::getZmat(
formula = form.pop,
data = xyt,
cellwidth = cellwidth,
regionalcovariates = covariates,
ext = 2,
overl = polyolay
)
mm <- length(attr(Zmat_pop, "mcens"))
nn <- length(attr(Zmat_pop, "ncens"))
offset <- lgcp::spatialAtRisk(list(X = attr(Zmat_pop, "mcens"),
Y = attr(Zmat_pop, "ncens"),
Zm = matrix(Zmat_pop, mm, nn)))
offsetList <- list()
for(i in 1:(laglength))offsetList[[i]] <- offset
} else {
form.pop <- NULL
offset <- NULL
offsetList <- NULL
}
cat("\nAdding temporal covariates\n")
if(!is.null(t.covs)){
Zmat <- lgcp::addTemporalCovariates(temporal.formula = form.t,
T = T,
laglength = laglength-1,
tdata = data.t,
Zmat = Zmat)
}
if(is.list(Zmat)){
nvar <- ncol(Zmat[[1]])
}else{
nvar <- ncol(Zmat)
}
if(is.null(prevRun)){
gprior <- lgcp::PriorSpec(lgcp::GaussianPrior(mean = rep(0,nvar),variance = diag(rep(25,nvar),nvar)))
if(!is.null(pop.var)){
popVal <- function(x,y){
spp <- sp::SpatialPoints(data.frame(x=x,y=y))
crsN <- CRS("+init=epsg:4326")
sp::proj4string(spp) <- crsN
sp::proj4string(covariates) <- crsN
val <- sp::over(spp,covariates)
return(val[,pop.var])
}
pop <- spatstat.geom::as.im(popVal,win)
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
spatial.dens = pop,
temporal.intens = lgcp::muEst(xyt)))
} else {
vars.est <- suppressWarnings(lgcp::minimum.contrast.spatiotemporal(data=xyt,
model="exponential",
temporal.intens = lgcp::muEst(xyt)))
}
INITS <- lgcp::lgcpInits(etainit = log(c(vars.est$estimates[2],
vars.est$estimates[1],
vars.est$estimates[3])),
betainit = NULL )
lgprior <- lgcp::PriorSpec(lgcp::LogGaussianPrior(mean = log(c(vars.est$estimates[2],
vars.est$estimates[1],
vars.est$estimates[3])),
variance = diag(rep(log(5),3), 3)))
priors <- lgcp::lgcpPrior(etaprior = lgprior, betaprior = gprior)
} else if(is(prevRun,"lgcpReal")){
priors <- lgcp::lgcpPrior(etaprior = prevRun$lgprior, betaprior = prevRun$gprior)
INITS <- prevRun$INITS
} else if(is(prevRun,"lgcpPrior")){
priors <- prevRun
}
CF <- lgcp::CovFunction(lgcp::exponentialCovFct)
## parellise
cat("\nStarting sampling... This may take a long time.\n")
cl <- parallel::makeCluster(nchains)
if(!is.null(lib)){
parallel::clusterExport(cl,c('lib'),envir = environment())
parallel::clusterEvalQ(cl,.libPaths(lib))
}
parallel::clusterEvalQ(cl,library(realTimeSurv))
parallel::clusterEvalQ(cl,library(lgcp))
parallel::clusterExport(cl,c('form','xyt','T','laglength','Zmat','priors','INITS',
'CF','cellwidth','dirname','mala.pars',"offsetList"),
envir = environment())
pbapply::pboptions(type="none")
lg.out <- pbapply::pbsapply(1:8,function(i)lgcpST(formula = form,
xyt = xyt,
T = T,
laglength = laglength-1,
ZmatList = Zmat,
poisson.offset = offsetList,
model.priors = priors,
model.inits = INITS,
spatial.covmodel = CF,
cellwidth = cellwidth,
mcmc.control = mcmcpars(mala.length = mala.pars[1],
burnin = mala.pars[2],
retain = mala.pars[3],
adaptivescheme = andrieuthomsh(inith = 1,
alpha = 0.5,
C = 1,
targetacceptance = 0.574)),
output.control = setoutput(gridfunction =
dump2dir(dirname = file.path(paste0(dirname,".",i)),
lastonly = F,
forceSave = TRUE)),
ext = 2),
cl = cl)
cat("\nSampling complete at: ",Sys.time())
parallel::stopCluster(cl)
if(is(lg.out,"matrix")){
eta <- do.call(rbind,lapply(1:8,function(i)return(lg.out[,i]$etarec)))
beta <- do.call(rbind,lapply(1:8,function(i)return(lg.out[,i]$betarec)))
timetaken <- do.call(rbind,lapply(1:8,function(i)return(lg.out[,i]$timetaken)))
lasth <- do.call(rbind,lapply(1:8,function(i)return(lg.out[,i]$lasth)))
} else if(is(lg.out,"list")){
eta <- do.call(rbind,lapply(1:8,function(i)return(lg.out[[i]]$etarec)))
beta <- do.call(rbind,lapply(1:8,function(i)return(lg.out[[i]]$betarec)))
timetaken <- do.call(rbind,lapply(1:8,function(i)return(lg.out[[i]]$timetaken)))
lasth <- do.call(rbind,lapply(1:8,function(i)return(lg.out[[i]]$lasth)))
} else {
eta <- do.call(rbind,lapply(lg.out,function(i)return(i$etarec)))
beta <- do.call(rbind,lapply(lg.out,function(i)return(i$betarec)))
timetaken <- do.call(rbind,lapply(1:8,function(i)return(i$timetaken)))
lasth <- do.call(rbind,lapply(1:8,function(i)return(i$lasth)))
}
environment(form.sp) <- NULL
environment(form) <- NULL
environment(form.pop) <- NULL
environment(form.t) <- NULL
if(is.list(Zmat)){
ins <- attr(Zmat[[1]], "gridobj")$cellInside[1:Owin$M,1:Owin$N]
} else {
ins <- attr(Zmat, "cellInside")[1:Owin$M,1:Owin$N]
}
out <- list(
eta = eta,
beta = beta,
cellInside = ins,
lgcpRunInfo = list(
timetaken=unlist(timetaken),
lasth = unlist(lasth),
priors=priors,
M = Owin$M,
N = Owin$N),
lgprior = lgcp::PriorSpec(lgcp::LogGaussianPrior(mean = colMeans(eta),variance = diag(apply(eta,2,var), 3))),
INITS = lgcp::lgcpInits(etainit = colMeans(eta),betainit = NULL ),
gprior = lgcp::PriorSpec(lgcp::GaussianPrior(mean = colMeans(beta),variance = diag(apply(beta,2,var),nvar))),
formulae = list(form.sp=form.sp,
form=form,
form.pop=form.pop,
form.t=form.t),
dirname=dirname,
boundary = boundary,
cellwidth=cellwidth,
data=data,
data.t=data.t,
xyt=xyt,
nchains=nchains
)
class(out) <- "lgcpReal"
return(out)
}
lg1 <- lgcp(data=dat,
pop.var = c("popdens"),
boundary=square,
covariates=square_pop,
cellwidth=0.1,
laglength = 7,
mala.pars=c(200,100,1),
nchains=3,
dirname="~/test",
lib = "C:/docs/R")
rm(list=ls())
.libPaths("C:/docs/R")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
gc()
devtools::check()
gc()
.libPaths("C:/docs/R")
require(devtools)
help(build)
build()
